import os
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    MessageHandler,
)

from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
FORWARD_CHAT_ID = os.getenv('FORWARD_CHAT_ID')
token = TOKEN
# –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
if TOKEN:
    print(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞
else:
    print("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

import logging

level=logging.INFO

format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters

# –≠—Ç–∞–ø—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU_ACTION, ASK_FAQ, ADMIN_AUTH, ADMIN_SECTION, MESSAGE_FORWARD, SERVICE_ACTION = range(6)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å\n"
        "/about_me - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n"
        "/social_media - –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
        "/services - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö\n"
    )
        
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
if TOKEN:
    print(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:5]}...")
else:
    print("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

def chunk_buttons(buttons, chunk_size=3):
    return [buttons[i:i + chunk_size] for i in range(0, len(buttons), chunk_size)]

async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_menu_buttons = [
        InlineKeyboardButton('‚ÑπÔ∏è INFO', callback_data='info'),
        InlineKeyboardButton('üìÉ FAQ', callback_data='faq'),
        InlineKeyboardButton('üí¨ –§–∏–¥–±—ç–∫', callback_data='feedback'),
        InlineKeyboardButton('üë§ –Ø?', callback_data='about_me'),
        InlineKeyboardButton('üîó –°–æ—Ü.—Å–µ—Ç–∏', callback_data='social_media'),
        InlineKeyboardButton('üõ†Ô∏è –£—Å–ª—É–≥–∏', callback_data='services'),
        InlineKeyboardButton('üí∏ –¶–µ–Ω—ã', callback_data='price'),
        InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è', callback_data='question'),
        InlineKeyboardButton('–ß—Ç–æ —ç—Ç–æ', callback_data='pomoch'),
        InlineKeyboardButton('üëã –ü–æ–∫–∞!', callback_data='bye'),
    ]

    chunked_buttons = chunk_buttons(main_menu_buttons, 3)
    formatted_buttons = []
    for i in range(max(len(chunked_buttons[0]), len(chunked_buttons[-1]))):
        row = []
        for chunk in chunked_buttons:
            if i < len(chunk):
                row.append(chunk[i])
        formatted_buttons.append(row)
    
    menu_text = "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=menu_text, 
        reply_markup=InlineKeyboardMarkup(formatted_buttons), 
        parse_mode='HTML'
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!\n –Ø - –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n –Ø –º–Ω–æ–≥–æ —á–µ–≥–æ —É–º–µ—é –∏ –∑–Ω–∞—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n 1. –í—Å—é –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–µ—Å—É—Ä—Å—É –∏ –µ–≥–æ —É—Å–ª—É–≥–∞–º\n 2. –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö\n 3. –ü—Ä–∞–π—Å –Ω–∞ —É—Å–ª—É–≥–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞–∫–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö\n –ï—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ‚Äò–°–≤—è–∑–∞—Ç—å—Å—è‚Äô –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —É—Å–ª—É–≥–∞–º –ª–∏—á–Ω–æ –∫–æ–º–∞–Ω–¥–µ - –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ‚Äò–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å‚Äô\n –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è "/help", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ.'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text)
    await send_main_menu(update, context)
    
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'faq':
        await faq(query, context)
    elif query.data == 'info':
        await info(query, context)
    elif query.data == 'feedback':
        await feedback(query, context)
    elif query.data == 'about_me':
        await about_me(query, context)
    elif query.data == 'back':
        await back(update, context)
    elif query.data == 'social_media':
        await social_media(query, context)
    elif query.data == 'services':
        await services(query, context)
    elif query.data.startswith('faq_'):
        index = int(query.data.split('_')[1])
        await query.message.reply_text(text=FAQ_ANSWERS[index], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='send_main_menu')]]))
    elif query.data == 'price':
        await prices(query, context)
    elif query.data == 'bye':
        await bye(query, context)
    elif query.data == 'order':
        await order(query, context)
    elif query.data == 'pomoch':
        await pomoch(query, context)
    elif query.data == 'sendimage1':
        await sendimage1(query, context)
    elif query.data == 'sendimage2':
        await sendimage2(query, context)
    elif query.data == 'sendimage3':
        await sendimage3(query, context)
    elif query.data == 'sendimage4':
        await sendimage4(query, context)
    elif query.data == 'support':
        await support(query, context)
    elif query.data == 'price1':
        await price1(update, context)
    elif query.data == 'price2':
        await price2(update, context)
    elif query.data == 'price3':
        await price3(update, context)
    elif query.data == 'price4':
        await price4(update, context)
    elif query.data == 'price5':
        await price5(update, context)
    elif query.data == 'price6':
        await price6(update, context)
    elif query.data == 'price7':
        await price7(update, context)
    elif query.data == 'price8':
        await price8(update, context)
    elif query.data == 'price9':
        await price9(update, context)
    elif query.data == 'price0':
        await price0(update, context)
    elif query.data == 'service1':
        await service1(update, context)
    elif query.data == 'service2':
        await service2(update, context)
    elif query.data == 'service3':
        await service3(update, context)
    elif query.data == 'service4':
        await service4(update, context)
    elif query.data == 'service5':
        await service5(update, context)
    elif query.data == 'service6':
        await service6(update, context)
    elif query.data == 'service7':
        await service7(update, context)
    elif query.data == 'service8':
        await service8(update, context)
    elif query.data == 'service9':
        await service9(update, context)
    elif query.data == 'service0':
        await service0(update, context)

async def pomoch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "/about_me - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n"
        "/social_media - –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
        "/services - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö\n"
        "/report - –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π\n"
        "/send_main_menu - –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/prices - –¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏\n"
        "/question - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –∏–ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/order - –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É\n"
        "/bye - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    info_text = "–Ø - –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–º–æ—â—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n HackingNet - —ç—Ç–æ –≤–µ–±-—Ä–µ—Å—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –≤–µ–± —É—Å–ª—É–≥ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ, –º–∏—Å—Å–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥—ã –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü (–±–ª–æ–≥–µ—Ä–æ–≤, –∞–≤—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞) –∏ –¥–ª—è –º–∞–ª–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ —É—Å–ª—É–≥–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ - –æ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞ –¥–æ –ø–æ–ª–Ω–æ–π –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –≤ –∂–∏–∑–Ω–∏\n –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é."
    await query.message.reply_text(text=info_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]]))

FAQ_QUESTIONS = [
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–µ–∫—Ç '–¢–æ—Ö–∞ –ö–∞–ª–∏–Ω–∏–Ω' –∏ –∫–∞–∫–æ–≤–∞ –µ–≥–æ —Ü–µ–ª—å?",
    "–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç?",
    "–°–æ–∑–¥–∞–µ—Ç –ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?",
    "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –≤–µ–±-—Å–∞–π—Ç –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?",
    "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞?",
    "–ö–∞–∫–∏–µ –æ—Ç–∑—ã–≤—ã –∏ —Ñ–∏–¥–±—ç–∫ –æ—Å—Ç–∞–≤–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ?",
    "–ß—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–æ–¥ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º digital –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–º?",
    "–ú–æ–∂–Ω–æ –ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ?",
    "–î–æ–ø—É—Å—Ç–∏–º, —è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω.",
    "–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ —ç—Ç–æ–º",
]

FAQ_ANSWERS = [
    "–ü—Ä–æ–µ–∫—Ç 'HackingNet' ‚Äî —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤ –∏ –±–∏–∑–Ω–µ—Å–∞ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤, SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É—Å–ª—É–≥. –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å —É—Å–ª—É–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–µ–µ, –∞ –∫–∞—á–µ—Å—Ç–≤–æ - –ª—É—á—à–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ—á—å –ª—é–¥—è–º –∏ –∫–æ–º–ø–∞–Ω–∏—è–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–µ–±—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å.",
    "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –¥–∞—Ç—å –ª—é–¥—è–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –í—Å–µ–º–∏—Ä–Ω–æ–π –ø–∞—É—Ç–∏–Ω—ã.",
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç, –≥–¥–µ –≤—ã –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ –Ω–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤, —Å–∫—Ä–∏–ø—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π, —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –±–æ—Ç–æ–≤ —É—Å–ª–æ–∂–Ω–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –û–° –∏ –ü–û, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –µ—â–µ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.",
    "–î–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏. –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ö–æ–Ω—Ç–∞–∫—Ç—ã'. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
    "–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ. –ö–ª–∏–µ–Ω—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∫–æ–º–∞–Ω–¥—ã, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏—Ö –±–∏–∑–Ω–µ—Å–∞.",
    "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –º–æ–ª–æ–¥—ã—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–º—É—Ç –≤ —Å–≤–æ–∏ —Ä—è–¥—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π! –ï—Å–ª–∏ –≤–∞—Å —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–°–≤—è–∑–∞—Ç—å—Å—è', –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É '–Ø - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'.",
    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —É—Å–ª—É–≥ –∏ —Ü–µ–Ω–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é, –∞ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.",
    "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–π –∏ —Ä–∞–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, –∫–∞–∫ –∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–º—É –≤—Å–µ–º –ª—é–¥—è–º, –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –ø—Ä–æ–µ–∫—Ç–æ–º '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω', –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –ó–∞—Ç–µ–º —Å–ª–µ–¥—É–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω —Ä–∞–±–æ—Ç",
    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: https://hacking.net.ru/ –∏–ª–∏\n –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –µ–≥–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–í–µ–±—Å–∞–π—Ç' —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞",

]

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    faq_buttons = [
        InlineKeyboardButton('HackingNet?', callback_data='faq_0'),
        InlineKeyboardButton('–ú–∏—Å—Å–∏—è', callback_data='faq_1'),
        InlineKeyboardButton('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', callback_data='faq_2'),
        InlineKeyboardButton('–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', callback_data='faq_3'),
        InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='faq_4'),
        InlineKeyboardButton('–û—Ç–∑—ã–≤—ã', callback_data='faq_5'),
        InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–∞', callback_data='faq_6'),
        InlineKeyboardButton('–£—Å–ª—É–≥–∏ –∏ –¶–µ–Ω–∞', callback_data='faq_7'),
        InlineKeyboardButton('–ó–∞—á–µ–º', callback_data='faq_8'),
        InlineKeyboardButton('–ü–æ—Å–µ—Ç–∏—Ç—å', callback_data='faq_9')
    ]
    chunked_buttons = chunk_buttons(faq_buttons)
    chunked_buttons.append([InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')])
    await query.message.reply_text(text='‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>', reply_markup=InlineKeyboardMarkup(chunked_buttons), parse_mode='HTML')

async def answer_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    index = int(query.data.split('_')[1])
    answer_text = FAQ_ANSWERS[index]
    back_button = [[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='faq')]]
    await query.message.edit_text(text=answer_text, reply_markup=InlineKeyboardMarkup(back_button), parse_mode='HTML')
    
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    feedback_buttons = [
        [InlineKeyboardButton('‚úçüèª –§–æ—Ä–º–∞ –¥–ª—è –∂–∞–ª–æ–±/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', url='https://hacking.net.ru/mycontacts/')],
        [InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è –ª–∏—á–Ω–æ...', callback_data='report')],
        [InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url='https://hacking.net.ru/feedback/')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', reply_markup=InlineKeyboardMarkup(feedback_buttons))

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    report_buttons = [
        [InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Email', url='https://hacking.net.ru/mycontacts/')],
        [InlineKeyboardButton('–í –¢–µ–ª–µ–≥—Ä–∞–º–º(–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª—å—à–µ)', url='https://t.me/toxakingnet')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –ª–∏—á–Ω–æ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:', reply_markup=InlineKeyboardMarkup(report_buttons))

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    support_buttons = [
        [InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏ –∫—Ä–∏–ø—Ç–∞', url='https://t.me/hackingnetrupay')],
        [InlineKeyboardButton('Tribute', url='https://t.me/hackingnetpay')],
        [InlineKeyboardButton('Patreon', url='https://patreon.com/hackingnet')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup=InlineKeyboardMarkup(support_buttons))

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    report_buttons = [
        [InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Email', url='https://hacking.net.ru/mycontacts/')],
        [InlineKeyboardButton('–í –¢–µ–ª–µ–≥—Ä–∞–º–º(–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª—å—à–µ)', url='https://t.me/toxakingnet')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –ª–∏—á–Ω–æ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:', reply_markup=InlineKeyboardMarkup(report_buttons))

async def about_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    about_me_text = "–Ø - –ø—Ä–æ–≥—Ä–∞–º–º–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ BOT API.\n –ú–æ—é —Ä–∞–±–æ—Ç—É –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π HackingNet –∫–æ–¥, –∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - —ç—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n –Ø —Ö–æ—Ç—å –∏ —É–Ω–∏–∫–∞–ª–µ–Ω, –Ω–æ –≤–æ–≤—Å–µ –Ω–µ –Ω–µ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ –º–µ–Ω—è –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –ø–æ–¥ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∑–∞ —É—Å–ª—É–≥–∞–º–∏ –∫ –∫–æ–º–∞–Ω–¥–µ HackingNet\n –û–±—Ä–∞—Ç–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ö–æ—Ç—å –º—ã –∏ –¥–µ–ª–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—Å–ø–µ—Ö–∏, –≤ —Å–∏–ª—É –Ω–∞—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ª—é–¥–µ–π –ø—Ä–∞–π—Å–∞ –Ω–∞ —É—Å–ª—É–≥–∏ - —É –Ω–∞—Å –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è\n –ú—ã –Ω–µ –ø–æ–∫—É–ø–∞–µ–º –¥–æ—Ä–æ–≥–∏—Ö –º–∞—à–∏–Ω –∏ –ø—Ä–æ—á–∏—Ö –Ω–µ–Ω—É–∂–Ω—ã—Ö –≤–µ—â–µ–π. –ù–∞—Å –∑–∞–±–æ—Ç–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Å–ª—É–≥–∏\n –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å, –∫–∞–∫ –∏ —Å–∫–æ–ª—å–∫–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º, –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º\n –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!"
    about_me_buttons = [
        [InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', callback_data='support')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')],
    ]
    await query.message.reply_text(text=about_me_text, reply_markup=InlineKeyboardMarkup(about_me_buttons))


async def social_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    social_buttons = [
        [InlineKeyboardButton('Github', url='https://github.com/HackingNETru')],
        [InlineKeyboardButton('Facebook', url='https://www.facebook.com/toxxxakalinin/')],
        [InlineKeyboardButton('Mastodon', url='https://mastodon.social/@hackingnet')],
        [InlineKeyboardButton('X', url='https://x.com/hackingnetru')],
        [InlineKeyboardButton('Patreon', url='https://patreon.com/hackingnet')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–¥–ø–∏—Å–∫–µ!', reply_markup=InlineKeyboardMarkup(social_buttons))

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–¥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –≤–µ–±—Å–∞–π—Ç–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã(—Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∏–ª–∏ –ø–æ—á—Ç—É) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.\n –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –∏ –Ω–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã - –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç.')
    return "QUESTION"

async def forward_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    await context.bot.send_message(chat_id=FORWARD_CHAT_ID, text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username}:\n\n{user_message}")
    await update.message.reply_text('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–∞–¥–µ—é—Å—å, –≤—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –°–ø–∞—Å–∏–±–æ!')
    return "END"

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_main_menu(update, context)
    return MENU_ACTION


async def services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    service_info = {
        'service_1': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ –∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–µ–±-—Ä–µ—à–µ–Ω–∏–π.',
        'service_2': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram Bot API.',
        'service_3': '–°–ª–æ–∂–Ω—ã–µ –±–æ—Ç—ã: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏.',
        'service_4': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ä–∞—Å—â–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
        'service_5': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—É—Å–ª—É–≥–∏ –¥–æ –µ–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ç–∏. –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º.',
        'service_6': 'SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.',
        'service_7': '–¶–∏—Ñ—Ä–æ–≤–æ–π –±—Ä–µ–Ω–¥–∏–Ω–≥: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞. –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –æ–Ω–ª–∞–π–Ω.',
        'service_8': '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π/—Ñ—É–Ω–∫—Ü–∏–π, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
        'service_9': '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ—Å–Ω–∞—â–µ–Ω–∏–µ: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –û–°',
        'service_10': '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –∏ —Ç—Ä–µ–Ω–∏–Ω–≥: –õ–µ–∫—Ü–∏–æ–Ω–Ω–æ-–≥–∏–¥–æ–≤—ã–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∏–Ω–≥'
    }
    service_buttons = [
        InlineKeyboardButton('üóΩ –°–∞–π—Ç—ã', callback_data='service1'),
        InlineKeyboardButton('ü¶æü¶ø –ë–æ—Ç—ã', callback_data='service2'),
        InlineKeyboardButton('ü¶æü§ñüî™ –°–ª–æ–∂–Ω—ã–µ –±–æ—Ç—ã', callback_data='service3'),
        InlineKeyboardButton('üöÄ –°–∫—Ä–∏–ø—Ç—ã', callback_data='service4'),
        InlineKeyboardButton('üì° –¢–µ—Ö', callback_data='service5'),
        InlineKeyboardButton('üîéüîé SEO', callback_data='service6'),
        InlineKeyboardButton('üíªüñ•Ô∏è D-–±—Ä–µ–Ω–¥–∏–Ω–≥', callback_data='service7'),
        InlineKeyboardButton('üîì –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', callback_data='service8'),
        InlineKeyboardButton('üîß –û–° –∏ –ü–û', callback_data='service9'),
        InlineKeyboardButton('üìù –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', callback_data='service0'),
        InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å', callback_data='order')
    ]
    chunked_buttons = chunk_buttons(service_buttons)
    chunked_buttons.append([InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')])
    await query.message.reply_text(
        text='–ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: ', 
        reply_markup=InlineKeyboardMarkup(chunked_buttons)
    )

async def service1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service1_text = '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ –∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–µ–±-—Ä–µ—à–µ–Ω–∏–π.'
    await query.message.reply_text(text=service1_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))

async def service2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service2_text = '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram Bot API.'
    await query.message.reply_text(text=service2_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))
    
async def service3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service3_text = '–°–ª–æ–∂–Ω—ã–µ –±–æ—Ç—ã: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏.'
    await query.message.reply_text(text=service3_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))    

async def service4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service4_text = '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ä–∞—Å—â–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞'
    await query.message.reply_text(text=service4_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))

async def service5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service5_text = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—É—Å–ª—É–≥–∏ –¥–æ –µ–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ç–∏. –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º.'
    await query.message.reply_text(text=service5_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))
    
async def service6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service6_text = 'SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.'
    await query.message.reply_text(text=service6_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))    

async def service7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service7_text = '–¶–∏—Ñ—Ä–æ–≤–æ–π –±—Ä–µ–Ω–¥–∏–Ω–≥: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞. –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –æ–Ω–ª–∞–π–Ω.'
    await query.message.reply_text(text=service7_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))

async def service8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service8_text = '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π/—Ñ—É–Ω–∫—Ü–∏–π, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
    await query.message.reply_text(text=service8_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))
    
async def service9(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service9_text = '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ—Å–Ω–∞—â–µ–Ω–∏–µ: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –û–°'
    await query.message.reply_text(text=service9_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))    

async def service0(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service0_text = '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –∏ —Ç—Ä–µ–Ω–∏–Ω–≥: –õ–µ–∫—Ü–∏–æ–Ω–Ω–æ-–≥–∏–¥–æ–≤—ã–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∏–Ω–≥'
    await query.message.reply_text(text=service0_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='services')]]))

async def price1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price1_text = '–ë–∞–∑–æ–≤—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å—Ç–∞—Ä—Ç–∞. –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∏ –ø—Ä–æ–¥–∞–∂–∏ —É—Å–ª—É–≥. 2000—Ä.'
    await query.message.edit_text(text=price1_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]]))

async def price2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price2_text = '–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ä–∞—Å—Ç—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. 3000—Ä.'
    await query.message.edit_text(text=price2_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]]))

async def price3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price3_text = '–í–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –Ω–∞—à–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏. –ù–∞ –≤—ã—Ö–æ–¥–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞, –∞ –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ß—Ç–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –º—ã –Ω–µ —É—Å–ø–æ–∫–æ–∏–º—Å—è, –ø–æ–∫–∞ –∫–æ–Ω–µ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å, –∫–∞–∫ –≤ –≤–∞—à–∏—Ö –º–µ—á—Ç–∞—Ö. 20000—Ä.'
    await query.message.edit_text(text=price3_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]])) 

async def price4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price4_text = '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–∞–π—Ç–∞ "–ø–æ–¥ –∫–ª—é—á" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 500—Ä –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —à–∞–±–ª–æ–Ω–æ–º –±–µ–∑ —É—Å–ª—É–≥. –ö–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —É—Å–ª—É–≥–∞ –¥–æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –ø–æ 100—Ä, –Ω–æ –¥–æ 3000—Ä –±–µ–∑ —É—á–µ—Ç–∞ –∏–∑–¥–µ—Ä–∂–µ–∫.'
    await query.message.edit_text(text=price4_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]]))

async def price5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price5_text = '–û—Ç–¥–µ–ª—å–Ω–æ –≤–∑—è—Ç–∞—è –≤–µ–± —É—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º—É–º —Å—Ç–æ–∏—Ç—å 1000—Ä. –ï—Å–ª–∏ —ç—Ç–æ –≤–µ—Å—å —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –≤ —Å–µ—Ç–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π, —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤, –¥–∏–∑–∞–π–Ω–æ–º –∏ —Ç–¥. - –≤ —Å—Ä–µ–¥–Ω–µ–º 10000—Ä –±–µ–∑ —É—á–µ—Ç–∞ –∏–∑–¥–µ—Ä–∂–µ–∫.'
    await query.message.edit_text(text=price5_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]]))

async def price6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price6_text = '–°–∫—Ä–∏–ø—Ç—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ –ª–µ–≥–∫–∏–µ (–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –Ω–µ—Å–ª–æ–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è) –∏ —Å–ª–æ–∂–Ω—ã–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–µ–± —Ä–µ—Å—É—Ä—Å–∞). –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç—Ç–æ–≥–æ –∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ 100—Ä –¥–æ 1000—Ä.'
    await query.message.edit_text(text=price6_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]])) 

async def price7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price7_text = '–¶–µ–Ω–∞ –Ω–∞ –±–æ—Ç–∞ —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –ø–æ –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º. –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç, –∏–º–µ—é—â–∏–π 1 –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é - 500—Ä. –ë–æ—Ç, –≤—Ä–æ–¥–µ —ç—Ç–æ–≥–æ, —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π (500 —Å—Ç—Ä–æ—á–µ–∫ –∫–æ–¥–∞) - 5000—Ä.'
    await query.message.edit_text(text=price7_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]]))

async def price8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price8_text = '–ë—Ä–µ–Ω–¥–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π —É—Å–ª—É–≥–æ–π, —Ç–∞–∫ –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°–≤—è–∑–∞—Ç—å—Å—è" –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ "–•–û–ß–£–ë–†–ï–ù–î"'
    await query.message.edit_text(text=price8_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]]))

async def price9(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price9_text = '–¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è. –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°–≤—è–∑–∞—Ç—å—Å—è" –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ "–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø".'
    await query.message.edit_text(text=price9_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]])) 

async def price0(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price0_text = '–£ –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.'
    await query.message.edit_text(text=price0_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='prices')]]))

async def prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price_buttons = [
        InlineKeyboardButton('üåê –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω', callback_data='price1'),
        InlineKeyboardButton('üåê –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω', callback_data='price2'),
        InlineKeyboardButton('üåê –ü–æ–¥ –∫–ª—é—á', callback_data='price3'),
        InlineKeyboardButton('üåê –û—Ç–¥–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', callback_data='price4'),
        InlineKeyboardButton('üåê –í–µ–± —É—Å–ª—É–≥–∏', callback_data='price5'),
        InlineKeyboardButton('üåê –°–∫—Ä–∏–ø—Ç—ã', callback_data='price6'),
        InlineKeyboardButton('üåê –ë–æ—Ç—ã', callback_data='price7'),
        InlineKeyboardButton('üåê –ë—Ä–µ–Ω–¥–∏–Ω–≥', callback_data='price8'),
        InlineKeyboardButton('üåê –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', callback_data='price9'),
        InlineKeyboardButton('üåê –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data='price0')
]
    chunked_buttons = chunk_buttons(price_buttons)
    chunked_buttons.append([InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')])
    await query.message.reply_text(text='‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>', reply_markup=InlineKeyboardMarkup(chunked_buttons), parse_mode='HTML')



async def bye(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query=update.callback_query
    await query.edit_message_text(text="–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.message.edit_text(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∂–µ—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ - –∑–∞–∫–∞–∑ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç.',
    )
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['ordering'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if context.user_data.get('ordering'):
        # ID —á–∞—Ç–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_chat_id = FORWARD_CHAT_ID

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        await context.bot.send_message(
            chat_id=target_chat_id,
            text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.message.from_user.username}:\n\n{update.message.text}"
        )

        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        context.user_data['ordering'] = False

async def sendimage1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sendimage1_text = '–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ TON: UQC5fgSCgELyW-AnPqUf158MB7ZtJ6uftNGxhjZtcZiAXriO'
    query = query.data
    await query.message.reply_text(text=sendimage1_text)
    await query.message.reply_photo(photo=InputFile('/hackingnetbot/bot/images/TON.jpeg'))

async def sendimage2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sendimage2_text = '–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ BTC: 1HuNSCkEDMKcT3dcerCniArEjvucX4UcE'
    query = query.data
    await query.message.reply_text(text=sendimage2_text)
    await query.message.reply_photo(photo=InputFile('/hackingnetbot/bot/images/BTC.jpeg'))

async def sendimage3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sendimage3_text = '–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ USDTRC: TJZusKpqm1ZRfMhMi78PM86ahLTutBJzJU'
    query = query.data
    await query.message.reply_text(text=sendimage3_text)
    await query.message.reply_photo(photo=InputFile('/hackingnetbot/bot/images/USDTRC.jpeg'))

async def sendimage4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sendimage4_text = '–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ USDTON: UQBqHTc_1DYJ-utkR_UMd7h8FY9G3duARYtWlUDns31Yc157'
    query = query.data
    await query.message.reply_text(text=sendimage4_text)
    await query.message.reply_photo(photo=InputFile('/hackingnetbot/bot/images/USDTON.jpeg'))   

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()
    
    start_handler = CommandHandler('start', start)
    prices_handler = CommandHandler('prices', prices)
    services_handler = CommandHandler('services', services)
    send_main_menu_handler = CommandHandler('send_main_menu', send_main_menu)
    help_handler = CommandHandler('help', help_command)
    callback_handler = CallbackQueryHandler(back, pattern='main_menu')
    info_handler = CallbackQueryHandler(info, pattern='info')
    application.add_handler(CallbackQueryHandler(faq, pattern=r'^faq$'))
    application.add_handler(CallbackQueryHandler(answer_faq, pattern=r'^faq_\d+$'))
    feedback_handler = CallbackQueryHandler(feedback, pattern='feedback')
    report_handler = CallbackQueryHandler(report, pattern='report')
    support_handler = CallbackQueryHandler(support, pattern='support')
    about_me_handler = CallbackQueryHandler(about_me, pattern='about_me')
    social_media_handler = CallbackQueryHandler(social_media, pattern='social_media')
    services_handler = CallbackQueryHandler(services, pattern='services')
    price_handler = CallbackQueryHandler(prices, pattern='price')
    bye_handler = CallbackQueryHandler(bye, pattern='bye')
    service1_handler = CallbackQueryHandler(service1, pattern='service1')
    service2_handler = CallbackQueryHandler(service2, pattern='service2')
    service3_handler = CallbackQueryHandler(service3, pattern='service3')
    service4_handler = CallbackQueryHandler(service4, pattern='service4')
    service5_handler = CallbackQueryHandler(service5, pattern='service5')
    service6_handler = CallbackQueryHandler(service6, pattern='service6')
    service7_handler = CallbackQueryHandler(service7, pattern='service7')
    service8_handler = CallbackQueryHandler(service8, pattern='service8')
    service9_handler = CallbackQueryHandler(service9, pattern='service9')
    service0_handler = CallbackQueryHandler(service0, pattern='service0')
    price1_handler = CallbackQueryHandler(price1, pattern='price1')
    price2_handler = CallbackQueryHandler(price2, pattern='price2')
    price3_handler = CallbackQueryHandler(price3, pattern='price3')
    price4_handler = CallbackQueryHandler(price4, pattern='price4')
    price5_handler = CallbackQueryHandler(price5, pattern='price5')
    price6_handler = CallbackQueryHandler(price6, pattern='price6')
    price7_handler = CallbackQueryHandler(price7, pattern='price7')
    price8_handler = CallbackQueryHandler(price8, pattern='price8')
    price9_handler = CallbackQueryHandler(price9, pattern='price9')
    price0_handler = CallbackQueryHandler(price0, pattern='price0')
    order_handler = CallbackQueryHandler(order, pattern='order')
    pomoch_handler = CallbackQueryHandler(pomoch, pattern='pomoch')
    application.add_handler(CallbackQueryHandler(ask_question, pattern=r'^question$'))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), forward_question))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))



    application.add_handler(start_handler)
    application.add_handler(send_main_menu_handler)
    application.add_handler(help_handler)
    application.add_handler(callback_handler)
    application.add_handler(info_handler)
    application.add_handler(feedback_handler)
    application.add_handler(support_handler)
    application.add_handler(report_handler)
    application.add_handler(about_me_handler)
    application.add_handler(social_media_handler)
    application.add_handler(services_handler)
    application.add_handler(price_handler)
    application.add_handler(bye_handler)
    application.add_handler(service1_handler)
    application.add_handler(service2_handler)
    application.add_handler(service3_handler)
    application.add_handler(service4_handler)
    application.add_handler(service5_handler)
    application.add_handler(service6_handler)
    application.add_handler(service7_handler)
    application.add_handler(service8_handler)
    application.add_handler(service9_handler)
    application.add_handler(service0_handler)
    application.add_handler(price1_handler)
    application.add_handler(price2_handler)
    application.add_handler(price3_handler)
    application.add_handler(price4_handler)
    application.add_handler(price5_handler)
    application.add_handler(price6_handler)
    application.add_handler(price7_handler)
    application.add_handler(price8_handler)
    application.add_handler(price9_handler)
    application.add_handler(price0_handler)
    application.add_handler(pomoch_handler)

    application.run_polling()
